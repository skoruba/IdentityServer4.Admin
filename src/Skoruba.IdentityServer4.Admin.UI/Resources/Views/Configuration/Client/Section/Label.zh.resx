<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AbsoluteRefreshTokenLifetime_Info" xml:space="preserve">
    <value>刷新令牌的最长生命周期，以秒为单位。 默认为 2592000 秒/30 天</value>
  </data>
  <data name="AbsoluteRefreshTokenLifetime_Label" xml:space="preserve">
    <value>绝对刷新令牌生命周期</value>
  </data>
  <data name="AccessTokenLifetime_Info" xml:space="preserve">
    <value>访问令牌 access_token 的生命周期（以秒为单位）（默认为 3600 秒/1 小时）</value>
  </data>
  <data name="AccessTokenLifetime_Label" xml:space="preserve">
    <value>访问令牌生命周期</value>
  </data>
  <data name="AccessTokenTypes_Info" xml:space="preserve">
    <value>指定访问令牌 access_token 是引用令牌还是自包含 JWT 令牌（默认为 Jwt）。</value>
  </data>
  <data name="AccessTokenTypes_Label" xml:space="preserve">
    <value>访问令牌类型</value>
  </data>
  <data name="AllowAccessTokensViaBrowser_Info" xml:space="preserve">
    <value>指定是否允许此客户端通过浏览器接收访问令牌 access_token。 这对于强化允许多种响应类型的流是有用的（例如，通过禁止应该使用代码身份令牌 id_token 的混合流客户端来添加令牌响应类型并因此将令牌泄漏到浏览器。）</value>
  </data>
  <data name="AllowAccessTokensViaBrowser_Label" xml:space="preserve">
    <value>允许通过浏览器访问令牌</value>
  </data>
  <data name="AllowOfflineAccess_Info" xml:space="preserve">
    <value>指定此客户端是否可以请求刷新令牌（请求 offline_access 作用域）</value>
  </data>
  <data name="AllowOfflineAccess_Label" xml:space="preserve">
    <value>允许离线访问</value>
  </data>
  <data name="AllowPlainTextPkce_Info" xml:space="preserve">
    <value>指定使用 PKCE 的客户端是否可以使用纯文本代码质询（不推荐 - 默认为 false）</value>
  </data>
  <data name="AllowPlainTextPkce_Label" xml:space="preserve">
    <value>允许纯文本 Pkce</value>
  </data>
  <data name="AllowRememberConsent_Info" xml:space="preserve">
    <value>指定用户是否可以选择存储同意决策。 默认为 true。</value>
  </data>
  <data name="AllowRememberConsent_Label" xml:space="preserve">
    <value>允许记住同意</value>
  </data>
  <data name="AlwaysIncludeUserClaimsInIdToken_Info" xml:space="preserve">
    <value>指定是否在身份令牌 id_token 中包含用户声明</value>
  </data>
  <data name="AlwaysIncludeUserClaimsInIdToken_Label" xml:space="preserve">
    <value>始终在身份令牌中包含用户声明</value>
  </data>
  <data name="AlwaysSendClientClaims_Info" xml:space="preserve">
    <value>如果设置，将为每个流发送客户端声明。 如果不是，仅用于客户端凭证流（默认为 false）</value>
  </data>
  <data name="AlwaysSendClientClaims_Label" xml:space="preserve">
    <value>始终发送客户端声明</value>
  </data>
  <data name="AuthorizationCodeLifetime_Info" xml:space="preserve">
    <value>授权码的生命周期（以秒为单位）（默认为 300 秒/5 分钟）</value>
  </data>
  <data name="AuthorizationCodeLifetime_Label" xml:space="preserve">
    <value>授权码生命周期</value>
  </data>
  <data name="ClientId_Info" xml:space="preserve">
    <value>客户端的唯一标识</value>
  </data>
  <data name="ClientId_Label" xml:space="preserve">
    <value>客户端标识</value>
  </data>
  <data name="ClientName_Info" xml:space="preserve">
    <value>客户端显示名称（用于记录和同意屏幕）</value>
  </data>
  <data name="ClientName_Label" xml:space="preserve">
    <value>客户端名称</value>
  </data>
  <data name="ClientUri_Info" xml:space="preserve">
    <value>有关客户端的更多信息的URI（在同意屏幕上使用）</value>
  </data>
  <data name="ClientUri_Label" xml:space="preserve">
    <value>客户端 Uri</value>
  </data>
  <data name="AllowedCorsOrigins_Info" xml:space="preserve">
    <value>如果指定，将由默认 CORS 策略服务实现（In-Memory 和 EF）用于为 JavaScript 客户端构建 CORS 策略。</value>
  </data>
  <data name="AllowedCorsOrigins_Label" xml:space="preserve">
    <value>允许跨域来源</value>
  </data>
  <data name="AllowedGrantTypes_Info" xml:space="preserve">
    <value>指定允许客户端使用的授权类型。 使用 GrantTypes 类进行常见组合。 默认授权列表：隐式授权 - (implicit)，客户端凭证授权 - (client_credentials)，授权码授权 - (authorization_code)，混合授权 - (hybrid)，资源所有者密码凭证授权 - (password)</value>
  </data>
  <data name="AllowedGrantTypes_Label" xml:space="preserve">
    <value>允许的授权类型</value>
  </data>
  <data name="AllowedScopes_Info" xml:space="preserve">
    <value>默认情况下，客户端无权访问任何资源 - 通过添加相应的作用域名称来指定允许的资源</value>
  </data>
  <data name="AllowedScopes_Label" xml:space="preserve">
    <value>允许的作用域</value>
  </data>
  <data name="Claims_Info" xml:space="preserve">
    <value>允许客户端的设置声明（将包含在访问令牌 access_token 中）。</value>
  </data>
  <data name="Claims_Label" xml:space="preserve">
    <value>声明</value>
  </data>
  <data name="ClientSecrets_Info" xml:space="preserve">
    <value>客户端密钥列表 - 访问令牌 access_token 端点的凭据。</value>
  </data>
  <data name="ClientSecrets_Label" xml:space="preserve">
    <value>客户端密钥</value>
  </data>
  <data name="BackChannelLogoutSessionRequired_Info" xml:space="preserve">
    <value>指定是否应在请求中将用户的会话 ID 发送到 BackChannelLogoutUri。 默认为 true。</value>
  </data>
  <data name="BackChannelLogoutSessionRequired_Label" xml:space="preserve">
    <value>需要后端通道注销会话</value>
  </data>
  <data name="BackChannelLogoutUri_Info" xml:space="preserve">
    <value>指定客户端的注销 URI，以用于基于 HTTP 的后端通道注销。 有关详细信息，请参阅 OIDC Back-Channel 规范。</value>
  </data>
  <data name="BackChannelLogoutUri_Label" xml:space="preserve">
    <value>后端通道退出 Uri</value>
  </data>
  <data name="ClientClaimsPrefix_Info" xml:space="preserve">
    <value>如果设置，客户端声明类型将以此为前缀。 默认为 client_。 目的是确保它们不会意外地与用户声明冲突。</value>
  </data>
  <data name="ClientClaimsPrefix_Label" xml:space="preserve">
    <value>客户端声明前缀</value>
  </data>
  <data name="Description_Info" xml:space="preserve">
    <value>客户端描述</value>
  </data>
  <data name="Description_Label" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="DeviceCodeLifetime_Info" xml:space="preserve">
    <value>设备代码的生命周期（以秒为单位）（默认为 300 秒/5 分钟）</value>
  </data>
  <data name="DeviceCodeLifetime_Label" xml:space="preserve">
    <value>设备代码生命周期</value>
  </data>
  <data name="Enabled_Info" xml:space="preserve">
    <value>指定是否启用客户端。 默认为 true。</value>
  </data>
  <data name="Enabled_Label" xml:space="preserve">
    <value>启用</value>
  </data>
  <data name="EnableLocalLogin_Info" xml:space="preserve">
    <value>指定此客户端是否可以使用本地帐户或仅外部 IdPs。 默认为 true。</value>
  </data>
  <data name="EnableLocalLogin_Label" xml:space="preserve">
    <value>启用本地登录</value>
  </data>
  <data name="FrontChannelLogoutSessionRequired_Info" xml:space="preserve">
    <value>指定是否应将用户的会话标识发送到 FrontChannelLogoutUri。 默认为 true。</value>
  </data>
  <data name="FrontChannelLogoutSessionRequired_Label" xml:space="preserve">
    <value>需要前端通道注销会话</value>
  </data>
  <data name="FrontChannelLogoutUri_Info" xml:space="preserve">
    <value>指定客户端的注销 URI，以用于基于 HTTP 的前端通道注销。 有关详细信息，请参阅 OIDC Front-Channel 规范。</value>
  </data>
  <data name="FrontChannelLogoutUri_Label" xml:space="preserve">
    <value>前端通道注销 Uri</value>
  </data>
  <data name="HashType_Info" xml:space="preserve">
    <value />
  </data>
  <data name="HashType_Label" xml:space="preserve">
    <value>哈希类型</value>
  </data>
  <data name="IdentityProviderRestrictions_Info" xml:space="preserve">
    <value>指定可以与此客户端一起使用的外部 IdPs（如果列表为空，则允许所有 IdPs）。 默认为空。</value>
  </data>
  <data name="IdentityProviderRestrictions_Label" xml:space="preserve">
    <value>身份提供程序限制</value>
  </data>
  <data name="IdentityTokenLifetime_Info" xml:space="preserve">
    <value>身份令牌 id_token 的生命周期（以秒为单位）（默认为 300 秒/5 分钟）</value>
  </data>
  <data name="IdentityTokenLifetime_Label" xml:space="preserve">
    <value>身份令牌生命周期</value>
  </data>
  <data name="IncludeJwtId_Info" xml:space="preserve">
    <value>指定 JWT 访问令牌 access_token 是否应具有嵌入的唯一标识（通过 jti 声明）。</value>
  </data>
  <data name="IncludeJwtId_Label" xml:space="preserve">
    <value>包括 Jwt 标识</value>
  </data>
  <data name="LogoUri_Info" xml:space="preserve">
    <value>客户端徽标 URI（在同意屏幕上使用）</value>
  </data>
  <data name="LogoUri_Label" xml:space="preserve">
    <value>徽标 Uri</value>
  </data>
  <data name="PairWiseSubjectSalt_Info" xml:space="preserve">
    <value>对于此客户端的用户，在配对主体标识生成中使用的盐值。</value>
  </data>
  <data name="PairWiseSubjectSalt_Label" xml:space="preserve">
    <value>配对主体盐</value>
  </data>
  <data name="PostLogoutRedirectUris_Info" xml:space="preserve">
    <value>指定在注销后重定向到允许的 URI</value>
  </data>
  <data name="PostLogoutRedirectUris_Label" xml:space="preserve">
    <value>注销重定向 Uri</value>
  </data>
  <data name="Properties_Info" xml:space="preserve">
    <value>字典可根据需要保存任何自定义客户端特定值。</value>
  </data>
  <data name="Properties_Label" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="PropertyKey_Info" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="PropertyKey_Label" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="PropertyValue_Info" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="PropertyValue_Label" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="ProtocolType_Info" xml:space="preserve">
    <value>默认为 OpenID Connect 协议</value>
  </data>
  <data name="ProtocolType_Label" xml:space="preserve">
    <value>协议类型</value>
  </data>
  <data name="RedirectUris_Info" xml:space="preserve">
    <value>指定允许的 URI 以返回令牌或授权码</value>
  </data>
  <data name="RedirectUris_Label" xml:space="preserve">
    <value>重定向 Uri</value>
  </data>
  <data name="RefreshTokenExpiration_Info" xml:space="preserve">
    <value>Absolute 绝对刷新令牌将在固定时间点到期（由“绝对刷新令牌生命周期”指定）

Sliding 滚动刷新令牌，刷新令牌时生命周期将被更新（按“滚动刷新令牌生命周期”中指定的量）。生命周期不会超过“绝对刷新令牌生命周期”。</value>
  </data>
  <data name="RefreshTokenExpiration_Label" xml:space="preserve">
    <value>刷新令牌过期</value>
  </data>
  <data name="RefreshTokenUsage.Info" xml:space="preserve">
    <value>ReUse 刷新令牌时，令牌句柄将保持不变

OneTime 刷新令牌时将更新令牌句柄</value>
  </data>
  <data name="RefreshTokenUsage.Label" xml:space="preserve">
    <value>刷新令牌使用情况</value>
  </data>
  <data name="RefreshTokenUsage_Info" xml:space="preserve">
    <value>ReUse 刷新令牌时，令牌句柄将保持不变

OneTime 刷新令牌时将更新令牌句柄</value>
  </data>
  <data name="RefreshTokenUsage_Label" xml:space="preserve">
    <value>刷新令牌使用情况</value>
  </data>
  <data name="RequireClientSecret_Info" xml:space="preserve">
    <value>指定此客户端是否需要密钥才能从令牌端点请求令牌（默认为 true）</value>
  </data>
  <data name="RequireClientSecret_Label" xml:space="preserve">
    <value>需要客户端密钥</value>
  </data>
  <data name="RequireConsent_Info" xml:space="preserve">
    <value>指定是否需要同意屏幕。 默认为 true。</value>
  </data>
  <data name="RequireConsent_Label" xml:space="preserve">
    <value>需要同意</value>
  </data>
  <data name="RequirePkce_Info" xml:space="preserve">
    <value>指定使用基于授权代码的授权类型的客户端是否必须发送校验密钥</value>
  </data>
  <data name="RequirePkce_Label" xml:space="preserve">
    <value>需要 Pkce</value>
  </data>
  <data name="RoleNormalizedName_Info" xml:space="preserve">
    <value>规范化角色名称</value>
  </data>
  <data name="RoleNormalizedName_Label" xml:space="preserve">
    <value>规范化名称</value>
  </data>
  <data name="SecretType_Info" xml:space="preserve">
    <value />
  </data>
  <data name="SecretType_Label" xml:space="preserve">
    <value>密钥类型</value>
  </data>
  <data name="SecretValue_Info" xml:space="preserve">
    <value />
  </data>
  <data name="SecretValue_Label" xml:space="preserve">
    <value>密钥值</value>
  </data>
  <data name="SlidingRefreshTokenLifetime_Info" xml:space="preserve">
    <value>滚动刷新生命周期是多少秒钟刷新令牌。 默认为 1296000 秒/15 天</value>
  </data>
  <data name="SlidingRefreshTokenLifetime_Label" xml:space="preserve">
    <value>滚动刷新令牌生命周期</value>
  </data>
  <data name="Type_Info" xml:space="preserve">
    <value />
  </data>
  <data name="Type_Label" xml:space="preserve">
    <value>声明类型</value>
  </data>
  <data name="UpdateAccessTokenClaimsOnRefresh_Info" xml:space="preserve">
    <value>获取或设置一个值，该值指示是否应在刷新令牌请求上更新访问令牌 access_token（及其声明）。</value>
  </data>
  <data name="UpdateAccessTokenClaimsOnRefresh_Label" xml:space="preserve">
    <value>刷新时更新访问令牌声明</value>
  </data>
  <data name="UserCodeType_Info" xml:space="preserve">
    <value>指定用于客户端的用户代码的类型。 否则回落到默认值。</value>
  </data>
  <data name="UserCodeType_Label" xml:space="preserve">
    <value>用户代码类型</value>
  </data>
  <data name="UserSsoLifetime_Info" xml:space="preserve">
    <value>自上次用户进行身份验证以来的最长持续时间（以秒为单位）。 默认为 null</value>
  </data>
  <data name="UserSsoLifetime_Label" xml:space="preserve">
    <value>用户 SSO 生命周期</value>
  </data>
  <data name="Value_Info" xml:space="preserve">
    <value />
  </data>
  <data name="Value_Label" xml:space="preserve">
    <value>声明值</value>
  </data>
  <data name="Expiration_Info" xml:space="preserve">
    <value>到期</value>
  </data>
  <data name="Expiration_Label" xml:space="preserve">
    <value>到期</value>
  </data>
  <data name="SecretDescription_Info" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="SecretDescription_Label" xml:space="preserve">
    <value>描述</value>
  </data>
</root>