<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description_Info" xml:space="preserve">
    <value>该值可以用于例如 在同意屏幕上。</value>
  </data>
  <data name="Description_Label" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="DisplayName_Info" xml:space="preserve">
    <value>该值可以用于例如 在同意屏幕上。</value>
  </data>
  <data name="DisplayName_Label" xml:space="preserve">
    <value>显示名称</value>
  </data>
  <data name="Enabled_Info" xml:space="preserve">
    <value>指示此资源是否已启用且可以请求。 默认为 true。</value>
  </data>
  <data name="Enabled_Label" xml:space="preserve">
    <value>启用</value>
  </data>
  <data name="Expiration_Info" xml:space="preserve">
    <value>到期</value>
  </data>
  <data name="Expiration_Label" xml:space="preserve">
    <value>到期</value>
  </data>
  <data name="Name_Info" xml:space="preserve">
    <value>API 的唯一名称。 此值用于自我认证，并将添加到传给受众的访问令牌 access_token 中。</value>
  </data>
  <data name="Name_Label" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="Properties_Info" xml:space="preserve">
    <value>需要保留任何自定义 Api 资源特定值的字典。</value>
  </data>
  <data name="Properties_Label" xml:space="preserve">
    <value>属性</value>
  </data>
  <data name="PropertyKey_Info" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="PropertyKey_Label" xml:space="preserve">
    <value>键</value>
  </data>
  <data name="PropertyValue_Info" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="PropertyValue_Label" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="Scopes_Info" xml:space="preserve">
    <value>API 必须至少有一个作用域。 每个作用域可以有不同的设置。</value>
  </data>
  <data name="Scopes_Label" xml:space="preserve">
    <value>作用域</value>
  </data>
  <data name="SecretDescription_Info" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="SecretDescription_Label" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="Secrets_Info" xml:space="preserve">
    <value>API 密钥用于内省端点。 API 可以使用 API 名称和密钥进行内省验证。</value>
  </data>
  <data name="Secrets_Label" xml:space="preserve">
    <value>密钥</value>
  </data>
  <data name="UserClaims_Info" xml:space="preserve">
    <value>应包含在访问令牌中的关联用户声明类型的列表。</value>
  </data>
  <data name="UserClaims_Label" xml:space="preserve">
    <value>用户声明</value>
  </data>
</root>